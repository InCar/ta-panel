import org.apache.tools.ant.taskdefs.condition.Os

buildscript{
    repositories {
        if (project.hasProperty('maven') && maven == 'maven.aliyun.com')
            maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        else
            mavenCentral()
    }
}

plugins{
    id 'org.springframework.boot' version '2.7.3'
    id 'java'
}

repositories {
    if (project.hasProperty('maven') && maven == 'maven.aliyun.com')
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    else
        mavenCentral()
}

dependencies{
    implementation(platform('org.springframework.boot:spring-boot-dependencies:2.7.3'))
    implementation('org.springframework.boot:spring-boot-starter-web:2.7.3'){
        exclude(module: "spring-boot-starter-logging")
    }

    implementation('org.slf4j:slf4j-api:1.7.36')
    implementation('org.apache.logging.log4j:log4j-core:2.18.0')
    runtimeOnly('org.apache.logging.log4j:log4j-slf4j-impl:2.18.0')

    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
}

def npmBuild = tasks.register('npmBuild', Exec){
    workingDir("$rootDir/src/main/resources/static")
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine("cmd.exe", "/C", "npm run build")
    }
    else{
        commandLine("npm", "run", "build")
    }
}

processResources{
    dependsOn npmBuild
    exclude('static/node_modules', 'static/src')
}

compileJava{
    options.encoding = 'utf-8'
    options.compilerArgs << '-Xlint:unchecked'
}

compileTestJava{
    options.encoding = 'utf-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Xdiags:verbose'
}

bootRun{
    systemProperties(System.getProperties())
}

test{
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
}

defaultTasks 'assemble'